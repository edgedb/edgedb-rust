use crate::error::Tag;
use crate::traits::{ErrorKind, Sealed};

macro_rules! define_errors {
    ($( ($id:ident, $code:expr, $tags: expr), )*) => {
        $(
            pub struct $id;

            impl Sealed for $id {
                fn is_superclass_of(code: u64) -> bool {
                    let mask = 0xFFFFFFFF_FFFFFFFF_u64
                               << ($code.trailing_zeros() / 8)*8;
                    code & mask == $code
                }
                fn has_tag(bit: u32) -> bool {
                    $tags & (1 << bit) != 0
                }
            }

            impl ErrorKind for $id {}
        )*
        pub(crate) fn tag_check(code: u64, bit: u32) -> bool {
            let tag_mask = match code {
                $(
                    $code => $tags,
                )*
                _ => 0,
            };
            return tag_mask & (1 << bit) != 0;
        }
    }
}

// AUTOGENERATED BY EdgeDB WITH
//     $ cargo run --bin edgedb_gen_errors -- errors.txt

#[allow(unused_macros)]  // fake macro for generator
macro_rules! define_tag {
    ($name: ident, $bit: expr) => {
        pub static $name: Tag = Tag { bit: $bit };
    }
}

// <define_tag>
pub static SHOULD_RECONNECT: Tag = Tag { bit: 0 };
pub static SHOULD_RETRY: Tag = Tag { bit: 1 };
// </define_tag>

#[allow(unused_macros)]  // fake macro for generator
macro_rules! define_error {
    ($name: ident, $code: expr, $tag_bits: expr) => {
        ($name, $code, $tag_bits),
    }
}

define_errors![
    // <define_error>
    (InternalServerError, 0x01000000u64, 0x00000000),
    (UnsupportedFeatureError, 0x02000000u64, 0x00000000),
    (ProtocolError, 0x03000000u64, 0x00000000),
    (BinaryProtocolError, 0x03010000u64, 0x00000000),
    (UnsupportedProtocolVersionError, 0x03010001u64, 0x00000000),
    (TypeSpecNotFoundError, 0x03010002u64, 0x00000000),
    (UnexpectedMessageError, 0x03010003u64, 0x00000000),
    (InputDataError, 0x03020000u64, 0x00000000),
    (ResultCardinalityMismatchError, 0x03030000u64, 0x00000000),
    (CapabilityError, 0x03040000u64, 0x00000000),
    (UnsupportedCapabilityError, 0x03040100u64, 0x00000000),
    (DisabledCapabilityError, 0x03040200u64, 0x00000000),
    (QueryError, 0x04000000u64, 0x00000000),
    (InvalidSyntaxError, 0x04010000u64, 0x00000000),
    (EdgeQLSyntaxError, 0x04010100u64, 0x00000000),
    (SchemaSyntaxError, 0x04010200u64, 0x00000000),
    (GraphQLSyntaxError, 0x04010300u64, 0x00000000),
    (InvalidTypeError, 0x04020000u64, 0x00000000),
    (InvalidTargetError, 0x04020100u64, 0x00000000),
    (InvalidLinkTargetError, 0x04020101u64, 0x00000000),
    (InvalidPropertyTargetError, 0x04020102u64, 0x00000000),
    (InvalidReferenceError, 0x04030000u64, 0x00000000),
    (UnknownModuleError, 0x04030001u64, 0x00000000),
    (UnknownLinkError, 0x04030002u64, 0x00000000),
    (UnknownPropertyError, 0x04030003u64, 0x00000000),
    (UnknownUserError, 0x04030004u64, 0x00000000),
    (UnknownDatabaseError, 0x04030005u64, 0x00000000),
    (UnknownParameterError, 0x04030006u64, 0x00000000),
    (SchemaError, 0x04040000u64, 0x00000000),
    (SchemaDefinitionError, 0x04050000u64, 0x00000000),
    (InvalidDefinitionError, 0x04050100u64, 0x00000000),
    (InvalidModuleDefinitionError, 0x04050101u64, 0x00000000),
    (InvalidLinkDefinitionError, 0x04050102u64, 0x00000000),
    (InvalidPropertyDefinitionError, 0x04050103u64, 0x00000000),
    (InvalidUserDefinitionError, 0x04050104u64, 0x00000000),
    (InvalidDatabaseDefinitionError, 0x04050105u64, 0x00000000),
    (InvalidOperatorDefinitionError, 0x04050106u64, 0x00000000),
    (InvalidAliasDefinitionError, 0x04050107u64, 0x00000000),
    (InvalidFunctionDefinitionError, 0x04050108u64, 0x00000000),
    (InvalidConstraintDefinitionError, 0x04050109u64, 0x00000000),
    (InvalidCastDefinitionError, 0x0405010Au64, 0x00000000),
    (DuplicateDefinitionError, 0x04050200u64, 0x00000000),
    (DuplicateModuleDefinitionError, 0x04050201u64, 0x00000000),
    (DuplicateLinkDefinitionError, 0x04050202u64, 0x00000000),
    (DuplicatePropertyDefinitionError, 0x04050203u64, 0x00000000),
    (DuplicateUserDefinitionError, 0x04050204u64, 0x00000000),
    (DuplicateDatabaseDefinitionError, 0x04050205u64, 0x00000000),
    (DuplicateOperatorDefinitionError, 0x04050206u64, 0x00000000),
    (DuplicateViewDefinitionError, 0x04050207u64, 0x00000000),
    (DuplicateFunctionDefinitionError, 0x04050208u64, 0x00000000),
    (DuplicateConstraintDefinitionError, 0x04050209u64, 0x00000000),
    (DuplicateCastDefinitionError, 0x0405020Au64, 0x00000000),
    (QueryTimeoutError, 0x04060000u64, 0x00000000),
    (ExecutionError, 0x05000000u64, 0x00000000),
    (InvalidValueError, 0x05010000u64, 0x00000000),
    (DivisionByZeroError, 0x05010001u64, 0x00000000),
    (NumericOutOfRangeError, 0x05010002u64, 0x00000000),
    (IntegrityError, 0x05020000u64, 0x00000000),
    (ConstraintViolationError, 0x05020001u64, 0x00000000),
    (CardinalityViolationError, 0x05020002u64, 0x00000000),
    (MissingRequiredError, 0x05020003u64, 0x00000000),
    (TransactionError, 0x05030000u64, 0x00000000),
    (TransactionConflictError, 0x05030100u64, 0x00000002),
    (TransactionSerializationError, 0x05030101u64, 0x00000002),
    (TransactionDeadlockError, 0x05030102u64, 0x00000002),
    (ConfigurationError, 0x06000000u64, 0x00000000),
    (AccessError, 0x07000000u64, 0x00000000),
    (AuthenticationError, 0x07010000u64, 0x00000000),
    (AvailabilityError, 0x08000000u64, 0x00000000),
    (BackendUnavailableError, 0x08000001u64, 0x00000002),
    (LogMessage, 0xF0000000u64, 0x00000000),
    (WarningMessage, 0xF0010000u64, 0x00000000),
    (ClientError, 0xFF000000u64, 0x00000000),
    (ClientConnectionError, 0xFF010000u64, 0x00000000),
    (ClientConnectionFailedError, 0xFF010100u64, 0x00000000),
    (ClientConnectionFailedTemporarilyError, 0xFF010101u64, 0x00000003),
    (ClientConnectionTimeoutError, 0xFF010200u64, 0x00000003),
    (ClientConnectionClosedError, 0xFF010300u64, 0x00000003),
    (InterfaceError, 0xFF020000u64, 0x00000000),
    (QueryArgumentError, 0xFF020100u64, 0x00000000),
    (MissingArgumentError, 0xFF020101u64, 0x00000000),
    (UnknownArgumentError, 0xFF020102u64, 0x00000000),
    (InvalidArgumentError, 0xFF020103u64, 0x00000000),
    (NoDataError, 0xFF030000u64, 0x00000000),
    // </define_error>
];
